<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Review">

    <resultMap id="ReviewMap" type="ReviewDTO">
        <id property="id" column="id"/>
        <result property="userId" column="userId"/>
        <result property="title" column="title"/>
        <result property="author" column="author"/>
        <result property="date" column="date"/>
        <result property="content" column="content"/>
        <result property="likes" column="likes"/>
        <result property="liked" column="liked"/>
        <association property="user" javaType="User">
            <id property="id" column="userId"/>
            <result property="profileImgPath" column="profileImgPath"/>
        </association>
    </resultMap>

    <insert id="save" parameterType="Review">
        INSERT INTO reviews(userId, title, author, content)
        VALUES (#{userId}, #{title}, #{author}, #{content})
    </insert>

    <select id="findById" parameterType="Long" resultType="Review">
        SELECT id, userId, title, author, DATE_FORMAT(date, '%Y-%m-%d') as date, content, likes, version
        FROM reviews
        WHERE id = #{id}
    </select>

    <select id="existsByTitleAndUserId" parameterType="map" resultType="Integer">
        SELECT id
        FROM reviews
        WHERE userId = #{userId} AND title = #{title}
    </select>

    <select id="findAllOrderByDateDesc" resultMap="ReviewMap">
        SELECT r.id, r.userId, r.title, r.author, DATE_FORMAT(r.date, '%Y-%m-%d') AS "date", r.content, r.likes,
        u.PROFILEIMGPATH,
        CASE WHEN l.liked = 1 THEN true ELSE false END AS liked
        FROM reviews r
        JOIN users u ON r.userId = u.id
        LEFT JOIN likes l ON r.id = l.reviewId
        <!--    로그인 시    -->
        <if test="userId != null">
            AND l.userid = #{userId}
        </if>
        <!--    비로그인 시    -->
        <if test="userId == null">
            AND l.userid = 0
        </if>
        ORDER BY r.id DESC
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset};
    </select>

    <select id="findAllOrderByLikesDesc" resultMap="ReviewMap">
        SELECT r.id, r.userId, r.title, r.author, DATE_FORMAT(r.date, '%Y-%m-%d') AS "date", r.content, r.likes,
        u.PROFILEIMGPATH,
        CASE WHEN l.userid IS NOT NULL THEN true ELSE false END AS liked
        FROM reviews r
        JOIN users u ON r.userId = u.id
        LEFT JOIN likes l ON r.id = l.reviewId
        <!--    로그인 시    -->
        <if test="userId != null">
            AND l.userid = #{userId}
        </if>
        <!--    비로그인 시    -->
        <if test="userId == null">
            AND l.userid = 0
        </if>
        ORDER BY r.likes DESC
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset};
    </select>

    <select id="findByTitleOrderByDateDesc" resultMap="ReviewMap">
        SELECT r.id, r.userId, r.title, r.author, DATE_FORMAT(r.date, '%Y-%m-%d') AS "date", r.content, r.likes,
        u.PROFILEIMGPATH,
        CASE WHEN l.userid IS NOT NULL THEN true ELSE false END AS liked
        FROM reviews r
        JOIN users u ON r.userId = u.id
        LEFT JOIN likes l ON r.id = l.reviewId
        <!--    로그인 시    -->
        <if test="userId != null">
            AND l.userid = #{userId}
        </if>
        <!--    비로그인 시    -->
        <if test="userId == null">
            AND l.userid = 0
        </if>
        WHERE r.title = #{title}
        <!--    특정 작성자가 쓴 리뷰 검색시    -->
        <if test="author != null">
            AND r.author = #{author}
        </if>
        ORDER BY r.id DESC
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset};
    </select>

    <select id="findByTitleOrderByLikesDesc" resultMap="ReviewMap">
        SELECT r.id, r.userId, r.title, r.author, DATE_FORMAT(r.date, '%Y-%m-%d') AS "date", r.content, r.likes,
        u.PROFILEIMGPATH,
        CASE WHEN l.userid IS NOT NULL THEN true ELSE false END AS liked
        FROM reviews r
        JOIN users u ON r.userId = u.id
        LEFT JOIN likes l ON r.id = l.reviewId
        <!--    로그인 시    -->
        <if test="userId != null">
            AND l.userid = #{userId}
        </if>
        <!--    비로그인 시    -->
        <if test="userId == null">
            AND l.userid = 0
        </if>
        WHERE r.title = #{title}
        <!--    특정 작성자가 쓴 리뷰 검색시    -->
        <if test="author != null">
            AND r.author = #{author}
        </if>
        ORDER BY r.likes DESC
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset};
    </select>

    <select id="countReviews" resultType="int">
        SELECT COUNT(*)
        FROM reviews
    </select>

    <select id="countReviewsByTitle" resultType="int">
        SELECT COUNT(*)
        FROM reviews
        WHERE title = #{title}
    </select>

    <select id="countReviewsByUserId" resultType="int">
        SELECT COUNT(*)
        FROM reviews
        WHERE userId = #{userId}
    </select>

    <select id="findByUserId" resultMap="ReviewMap">
        SELECT id, title, DATE_FORMAT(date, '%Y-%m-%d') as date
        FROM reviews
        WHERE userId = #{userId}
        ORDER BY id DESC
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset};
    </select>

    <select id="findByIdForUpdate" resultType="Review">
        SELECT id, userId, title, author, DATE_FORMAT(date, '%Y-%m-%d') as date, content, likes, version
        FROM reviews
        WHERE id = #{id}
        FOR UPDATE
    </select>

    <update id="updateLikes" parameterType="map">
        UPDATE reviews
        SET likes = likes + #{likeChange},
        version = version + 1
        WHERE id = #{reviewId}
        AND version = #{currentVersion}
    </update>

    <update id="update" parameterType="map">
        UPDATE reviews
        SET content = #{content}
        WHERE id = #{id}
    </update>

    <update id="updateAuthor" parameterType="map">
        UPDATE reviews
        SET author = #{author}
        WHERE userId = #{userId}
    </update>

    <delete id="delete" parameterType="Long">
        DELETE FROM reviews where id=#{id}
    </delete>

</mapper>